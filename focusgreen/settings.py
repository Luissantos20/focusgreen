"""
Django settings for focusgreen project.
Generated by 'django-admin startproject' using Django 5.2.7.
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key
import dj_database_url

# ==============================================
# üåø Caminhos do projeto
# ==============================================

BASE_DIR = Path(__file__).resolve().parent.parent

# ==============================================
# üåø Vari√°veis de ambiente (.env)
# ==============================================

# Caminho do arquivo .env
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Carrega valores
SECRET_KEY = os.getenv("SECRET_KEY", get_random_secret_key())

# DEBUG: transforma "True"/"False" em booleano
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# Hosts autorizados
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")

# CSRF (necess√°rio porque voc√™ tem formul√°rios POST)
# ‚ö†Ô∏è em produ√ß√£o, adicione o dom√≠nio do Render e qualquer dom√≠nio pr√≥prio
CSRF_TRUSTED_ORIGINS = [
    "https://*.onrender.com",
]

# Chave da API da OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    print("‚ö†Ô∏è AVISO: A vari√°vel OPENAI_API_KEY n√£o foi encontrada no .env")

# ==============================================
# üß© Aplicativos instalados
# ==============================================

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "accounts",
    "tracker",
    "dashboard",
    "assistant",
]

# ==============================================
# ‚öôÔ∏è Middlewares
# ==============================================

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "focusgreen.urls"

# ==============================================
# üß± Templates
# ==============================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],  # estrutura organizada por app
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "focusgreen.wsgi.application"

# ==============================================
# üóÑÔ∏è Banco de dados
# ==============================================

DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv("DATABASE_URL", "sqlite:///db.sqlite3"),
        conn_max_age=600,  # reaproveita conex√µes
    )
}

# ==============================================
# üîê Autentica√ß√£o
# ==============================================

LOGIN_REDIRECT_URL = 'profile'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

# ==============================================
# üîí Valida√ß√£o de senhas
# ==============================================

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ==============================================
# üåé Localiza√ß√£o
# ==============================================

LANGUAGE_CODE = "pt-br"
TIME_ZONE = "America/Sao_Paulo"
USE_I18N = True
USE_TZ = True

# ==============================================
# üñºÔ∏è Arquivos est√°ticos
# ==============================================

BASE_DIR = Path(__file__).resolve().parent.parent

# URL base para servir arquivos est√°ticos
STATIC_URL = "/static/"

# Pasta onde os arquivos coletados (de todos os apps) ser√£o armazenados em produ√ß√£o
STATIC_ROOT = BASE_DIR / "staticfiles"

# Pasta de arquivos est√°ticos usados em desenvolvimento (como seu pr√≥prio style.css, JS, imagens)
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Configura√ß√£o do backend de armazenamento para o WhiteNoise
# Ele comprime e versiona os arquivos est√°ticos, permitindo cache eficiente no navegador
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
    }
}


# ==============================================
# üîë Campo padr√£o de ID
# ==============================================

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"